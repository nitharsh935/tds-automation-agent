from fastapi import FastAPI, HTTPException, Query
import os
import subprocess
import openai
import requests
import json
import sqlite3
import duckdb
from datetime import datetime


token = os.environ.get("AIPROXY_TOKEN")
app = FastAPI()

def call_llm(prompt: str) -> str:
    """Call GPT-4o-Mini to interpret the task."""
    response = openai.ChatCompletion.create(
        model="gpt-4o-mini",
        messages=[{"role": "system", "content": "Extract structured task information."},
                  {"role": "user", "content": prompt}],
        api_key=token
    )
    return response["choices"][0]["message"]["content"].strip()

def install_uv():
    """Ensure 'uv' is installed."""
    try:
        subprocess.run(["uv", "--version"], check=True, stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL)
    except subprocess.CalledProcessError:
        subprocess.run(["pip", "install", "uv"], check=True)

def run_datagen(email: str):
    """Download and execute datagen.py with the user's email."""
    url = "https://raw.githubusercontent.com/sanand0/tools-in-data-science-public/tds-2025-01/project-1/datagen.py"
    script_path = "/data/datagen.py"
    
    response = requests.get(url)
    if response.status_code == 200:
        with open(script_path, "w") as file:
            file.write(response.text)
        subprocess.run(["python3", script_path, email], check=True)
        return "Data generation complete."
    else:
        raise RuntimeError("Failed to download datagen.py")

def fetch_and_save_api_data(api_url: str, output_path: str):
    """Fetch data from an API and save it."""
    if not output_path.startswith("/data/"):
        raise RuntimeError("Access to paths outside /data is not allowed")
    response = requests.get(api_url)
    if response.status_code == 200:
        with open(output_path, "w") as file:
            file.write(response.text)
        return f"Data saved to {output_path}."
    else:
        raise RuntimeError("Failed to fetch API data")

def execute_sql_query(database_path: str, query: str, output_path: str):
    """Run a SQL query on a SQLite or DuckDB database and save the output."""
    if not database_path.startswith("/data/") or not output_path.startswith("/data/"):
        raise RuntimeError("Access to paths outside /data is not allowed")
    if not os.path.exists(database_path):
        raise RuntimeError("Database file not found")
    
    conn = sqlite3.connect(database_path) if database_path.endswith(".db") else duckdb.connect(database_path)
    cursor = conn.cursor()
    cursor.execute(query)
    result = cursor.fetchall()
    conn.close()
    
    with open(output_path, "w") as file:
        file.write(json.dumps(result, indent=2))
    
    return f"Query executed and result saved to {output_path}."

def clone_and_commit_repo(repo_url: str, commit_message: str, output_path: str):
    """Clone a git repo and make a commit."""
    if not output_path.startswith("/data/"):
        raise RuntimeError("Access to paths outside /data is not allowed")
    subprocess.run(["git", "clone", repo_url, output_path], check=True)
    subprocess.run(["git", "-C", output_path, "commit", "--allow-empty", "-m", commit_message], check=True)
    return f"Repo cloned and empty commit added in {output_path}."

def extract_and_save_markdown_titles(input_dir: str, output_path: str):
    """Find Markdown files in /data/docs/ and extract H1 titles."""
    if not input_dir.startswith("/data/") or not output_path.startswith("/data/"):
        raise RuntimeError("Access to paths outside /data is not allowed")
    
    index = {}
    for root, _, files in os.walk(input_dir):
        for file in files:
            if file.endswith(".md"):
                with open(os.path.join(root, file), "r") as md_file:
                    for line in md_file:
                        if line.startswith("# "):
                            index[file] = line[2:].strip()
                            break
    with open(output_path, "w") as file:
        json.dump(index, file, indent=2)
    
    return f"Markdown index created at {output_path}."

def execute_task(task: str) -> str:
    """Process and execute tasks based on LLM output."""
    try:
        structured_task = call_llm(task)
        if "install uv and run datagen" in structured_task:
            email = structured_task.split("email=")[-1].strip()
            install_uv()
            return run_datagen(email)
        elif "fetch api data" in structured_task:
            return fetch_and_save_api_data(structured_task.split("url=")[-1].strip(), structured_task.split("output=")[-1].strip())
        elif "execute sql query" in structured_task:
            return execute_sql_query(structured_task.split("database=")[-1].strip(), structured_task.split("query=")[-1].strip(), structured_task.split("output=")[-1].strip())
        elif "clone and commit repo" in structured_task:
            return clone_and_commit_repo(structured_task.split("repo=")[-1].strip(), structured_task.split("commit=")[-1].strip(), structured_task.split("output=")[-1].strip())
        elif "extract markdown titles" in structured_task:
            return extract_and_save_markdown_titles("/data/docs/", "/data/docs/index.json")
        else:
            raise ValueError("Unsupported task")
    except Exception as e:
        raise RuntimeError(str(e))
